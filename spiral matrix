class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
      vector<int> result;
    
    if (matrix.empty()) {
        return result;
    }
    
    int m = matrix.size();
    int n = matrix[0].size();
    
    int rowStart = 0;
    int rowEnd = m - 1;
    int colStart = 0;
    int colEnd = n - 1;
    
    while (rowStart <= rowEnd && colStart <= colEnd) {
        // Traverse right
        for (int col = colStart; col <= colEnd; ++col) {
            result.push_back(matrix[rowStart][col]);
        }
        ++rowStart;
        
        // Traverse down
        for (int row = rowStart; row <= rowEnd; ++row) {
            result.push_back(matrix[row][colEnd]);
        }
        --colEnd;
        
        // Traverse left
        if (rowStart <= rowEnd) {
            for (int col = colEnd; col >= colStart; --col) {
                result.push_back(matrix[rowEnd][col]);
            }
            --rowEnd;
        }
        
        // Traverse up
        if (colStart <= colEnd) {
            for (int row = rowEnd; row >= rowStart; --row) {
                result.push_back(matrix[row][colStart]);
            }
            ++colStart;
        }
    }
    
    return result;  
    }
};
